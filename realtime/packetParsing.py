data = """
F2 00 08 40 0E 46 00 46 66 C3 67 42 46 66 C3 86 
83 A3 87 22 03 A2 12 0B F2 41 F0 90 40 28 00 02 
21 66 21 78 67 C7 86 47 46 42 26 C7 62 C3 63 67 
C7 83 A3 86 02 07 93 0A 43 08 FF F8 40 E0 A0 00 
79 C6 62 E3 86 A7 06 C3 66 06 07 03 A7 A6 C0 27 
25 48 E0 D8 52 00 63 00 81 60 67 E2 50 E3 E2 A6 
A7 A2 E3 A6 82 02 A6 43 86 0A FF D2 C8 9E 69 20 
A8 08 E7 E4 E6 42 24 C2 06 A2 80 62 84 67 A2 87 
83 A7 23 A7 E5 27 43 C4 08 E0 04 CA B4 69 41 46 
90 12 C3 E2 C7 E7 B1 07 91 67 06 06 07 4B A0 29 
20 F0 C8 02 A8 61 68 27 84 A6 85 63 47 E2 23 46 
E0 27 43 23 A3 A3 02 E0 29 E2 82 D2 82 00 02 0A 
03 00 87 78 63 A2 20 86 47 C3 C6 22 E3 20 62 E3 
B2 46 07 43 C3 23 02 A2 06 02 26 10 2E 28 43 F0 
E8 82 00 0A 0A 60 00 43 47 67 63 62 E7 46 26 C2 
82 62 C2 E3 55 83 A2 A3 83 A2 83 6D 0A 00 80 81 
97 42 86 E2 26 46 62 C3 C7 47 03 A3 C2 A3 06 A3 
07 94 27 86 A0 09 F0 0A 88 5A A6 69 12 E2 02 82 
E4 13 A6 67 E2 E6 83 A3 26 82 0B FF F0 A1 AC 61 
47 0A 62 06 26 C3 C7 82 23 43 A2 86 26 E2 E7 46 
27 A6 02 06 18 14 40 0B F2 61 F0 DC C1 A1 21 0F 
62 63 87 67 42 80 67 E2 A3 94 A3 86 87 67 23 26 
86 87 06 A0 09 E0 03 D2 02 02 69 A0 89 03 02 67 
A7 E3 42 67 87 67 42 46 47 02 83 63 08 14 28 E0 
40 F0 40 9E 02 0A 49 00 85 46 67 34 46 E2 A0 82 
E7 42 62 22 83 A7 22 27 A3 62 6F 0B 0A 82 9C 00 
00 40 E3 0A C6 67 47 63 84 16 67 23 82 87 C6 66 
C2 25 83 61 22 86 5A 1B C0 0B F2 D2 D8 80 F3 0A 
40 A8 48 46 E7 47 43 63 A6 06 E7 C7 C3 03 A3 27 
86 26 42 10 02 0B 40 FF F0 C8 48 A9 03 C2 E7 16 
C3 86 35 63 C3 42 A6 86 06 06 83 86 23 0B 08 2B 
0B FF 40 CA 00 20 00 05 86 E6 A3 C3 E6 43 83 22 
03 E2 62 66 C3 82 A6 07 0C 01 0A FF 40 02 53 58 
E6 42 C6 27 A6 27 26 47 63 C2 A7 02 23 06 A2 0B 
83 F0 60 20 81 03 63 C7 42 87 B1 C2 E2 87 82 A2 
F1 22 26 22 27 4A 2E 28 0A E0 03 D2 88 50 10 42 
02 83 C6 42 02 06 A7 26 0A 0A E4 40 40 88 C4 E2 
E2 07 A7 26 E2 B5 66 46 67 47 02 06 83 83 E6 28 
FF F0 00 21 C7 67 67 63 02 22 43 66 C2 07 A6 86 
A6 03 02 82 6A 67 28 E0 D2 40 41 03 30 59 C3 12 
E3 86 03 C3 46 A7 82 07 23 62 83 86 0E 60 FF F0 
C8 8C B0 27 E6 62 C3 E7 46 E3 13 63 03 66 26 01 
54 22 03 41 A7 82 46 0B 04 0A FF 82 CA 60 81 52 
17 47 42 42 C7 67 07 83 B1 E3 A7 C6 86 12 08 0A 
E4 42 D2 F0 A1 26 E7 47 11 C7 C6 E7 E7 22 90 C7 
46 06 66 A3 A6 22 01 0A E2 C1 F0 29 A8 46 79 07 
62 E7 E6 46 03 82 27 07 83 06 02 80 08 E6 08 40 
A2 06 78 46 C6 A5 62 92 C3 A6 82 66 43 A6 26 07 
06 67 28 FF 80 00 A1 42 03 63 51 C2 42 E7 C6 92 
43 A2 96 E3 46 C7 27 A3 0E 0A D2 D0 88 70 C6 47 
82 82 E2 47 A0 C3 83 23 C7 87 E3 22 87 A2 02 28 
0A C0 02 40 29 09 88 19 66 C6 82 63 67 81 C6 20 
66 46 E3 87 23 A2 27 E1 27 87 26 5B 80 28 E2 F0 
40 00 08 03 07 C1 47 21 C7 23 66 66 86 A3 27 A7 
87 4A 18 14 02 40 E0 F0 00 02 69 00 85 E7 27 02 
70 62 43 12 07 07 12 02 E6 C2 C7 12 86 E7 82 62 
0E 84 0A 42 F0 89 20 E2 30 F1 63 A7 63 22 63 C6 
86 26 27 31 06 C6 0A E0 E1 00 02 47 13 43 C4 C2 
E3 62 47 63 26 A2 A6 86 26 66 46 0A 60 29 E0 80 
CA 56 01 43 88 67 13 A7 C2 22 63 A3 42 E6 07 A1
"""

# 데이터를 정리
data_bytes = bytes.fromhex(data.replace("\n", " ").replace(" ", ""))

# 패킷 헤더 ID 정의
header_id = bytes.fromhex("0CDA0ADC0CDA0ADCU")

# 패킷 단위로 나누기
packets = data_bytes.split(header_id)

# 각 패킷에 헤더 추가
packets_with_header = [header_id + packet for packet in packets if packet]

# 패킷 출력
for i, packet in enumerate(packets_with_header):
    print(f"패킷 {i+1}:", packet.hex().upper())
